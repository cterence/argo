atlantis:
  ## -------------------------- ##
  # Values to override for your instance.
  ## -------------------------- ##

  ## An option to override the atlantis url,
  ##   if not using an ingress, set it to the external IP.
  # atlantisUrl: http://10.0.0.0

  # Replace this with your own repo whitelist:
  orgWhitelist: gitlab.com/terencec_homelab/*
  # logLevel: "debug"

  # If using GitLab, specify like the following:
  gitlab:
    user: terencec_atlantis
    # token: bar
    # secret: baz
  # (The chart will perform the base64 encoding for you for values that are stored in secrets.)

  # If managing secrets outside the chart for the webhook, use this variable to reference the secret name
  vcsSecretName: "atlantis-gitlab-credentials"

  # When referencing Terraform modules in private repositories, it may be helpful
  # (necessary?) to use redirection in a .gitconfig like so:
  # gitconfig: |
  # [url "https://YOUR_GH_TOKEN@github.com"]
  #   insteadOf = https://github.com
  # [url "https://YOUR_GH_TOKEN@github.com"]
  #   insteadOf = ssh://git@github.com
  # [url "https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com"]
  #   insteadOf = https://gitlab.com
  # [url "https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com"]
  #   insteadOf = ssh://git@gitlab.com
  # Source: https://stackoverflow.com/questions/42148841/github-clone-with-oauth-access-token

  # If managing secrets outside the chart for the gitconfig, use this variable to reference the secret name
  # gitconfigSecretName: 'mygitconfigsecret'

  awsSecretName: "atlantis-aws-credentials"

  ## To be used for mounting credential files (when using google provider).
  serviceAccountSecrets:
    # credentials: <json file as base64 encoded string>
    # credentials-staging: <json file as base64 encoded string>

  ## -------------------------- ##
  # Default values for atlantis (override as needed).
  ## -------------------------- ##

  image:
    repository: runatlantis/atlantis
    tag: v0.18.2
    pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # imagePullSecrets:
  # - myRegistryKeySecretName

  ## Use Server Side Repo Config,
  ## ref: https://www.runatlantis.io/docs/server-side-repo-config.html
  ## Example default configuration
  # repoConfig: |
  #  ---
  #  repos:
  #  - id: /.*/
  #    apply_requirements: []
  #    workflow: default
  #    allowed_overrides: []
  #    allow_custom_workflows: false
  #  workflows:
  #    default:
  #      plan:
  #        steps: [init, plan]
  #      apply:
  #        steps: [apply]

  # allowForkPRs enables atlantis to run on a fork Pull Requests
  allowForkPRs: false

  # allowDraftPRs enables atlantis to run on a draft Pull Requests
  allowDraftPRs: false

  # hidePrevPlanComments enables atlantis to hide previous plan comments
  hidePrevPlanComments: false

  ## defaultTFVersion set the default terraform version to be used in atlantis server
  # defaultTFVersion: 0.12.0

  # disableApply disables running `atlantis apply` regardless of which flags are sent with it
  disableApply: false

  # disableApplyAll disables running `atlantis apply` without any flags
  disableApplyAll: false

  # disableRepoLocking stops atlantis locking projects and or workspaces when running terraform
  disableRepoLocking: false

  # Use Diff Markdown Format for color coding diffs
  enableDiffMarkdownFormat: false

  # Optionally specify an username and a password for basic authentication
  # basicAuth:
  #   username: "atlantis"
  #   password: "atlantis"

  # We only need to check every 60s since Atlantis is not a high-throughput service.
  livenessProbe:
    enabled: true
    periodSeconds: 60
    initialDelaySeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    scheme: HTTP
  readinessProbe:
    enabled: true
    periodSeconds: 60
    initialDelaySeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    scheme: HTTP

  service:
    type: ClusterIP
    port: 80
    loadBalancerIP: null

  podTemplate:
    annotations:
      {}
      # kube2iam example:
      # iam.amazonaws.com/role: role-arn
    labels: {}

  statefulSet:
    annotations: {}
    labels: {}
    securityContext:
      fsGroup: 1000
      runAsUser: 100

  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      external-dns.alpha.kubernetes.io/target: home.terence.cloud
      nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
      nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    path: /
    pathType: Prefix
    host:
    hosts:
      - host: atlantis.terence.cloud
        paths: ["/"]
    tls:
      - secretName: atlantis.terence.cloud-tls
        hosts:
          - atlantis.terence.cloud
    labels: {}

  resources:
    requests:
      memory: 1Gi
      cpu: 100m
    limits:
      memory: 1Gi
      cpu: 100m

  # Disk space for Atlantis to check out repositories
  dataStorage: 1Gi

  replicaCount: 1

  ## test container details
  test:
    enabled: true
    image: lachlanevenson/k8s-kubectl
    imageTag: v1.4.8-bash

  nodeSelector: {}

  tolerations: []

  affinity: {}

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # Set the `automountServiceAccountToken` field on the pod template spec
    # If false, no kubernetes service account token will be mounted to the pod
    mount: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
    # Annotations for the Service Account
    # Example:
    #
    # annotations:
    #   annotation1: value
    #   annotation2: value
    annotations: {}

  # tlsSecretName: tls

  # Optionally specify additional environment variables to be populated from Kubernetes secrets.
  # Useful for passing in TF_VAR_foo or other secret environment variables from Kubernetes secrets.
  environmentSecrets: []
  # environmentSecrets:
  #   - name: THE_ENV_VAR
  #     secretKeyRef:
  #       name: the_k8s_secret_name
  #       key: the_key_of_the_value_in_the_secret

  # Optionally specify additional environment variables in raw yaml format
  # Useful to specify variables refering to k8s objects
  # environmentRaw:
  #   - name: POD_IP
  #     valueFrom:
  #       fieldRef:
  #         fieldPath: status.podIP
  environmentRaw: []

  # Optionally specify additional Kubernetes secrets to load environment variables from.
  # All key-value pairs within these secrets will be set as environment variables.
  # Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
  # For example, providing ATLANTIS_GH_USER here and defining a value for github.user will result in the github.user value being used.
  loadEnvFromSecrets:
    - atlantis-terraform-cloud-token

  # Optionally specify additional Kubernetes ConfigMaps to load environment variables from.
  # All key-value pairs within these ConfigMaps will be set as environment variables.
  # Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
  # For example, providing ATLANTIS_ALLOW_FORK_PRS here and defining a value for allowForkPRs will result in the allowForkPRs value being used.
  loadEnvFromConfigMaps: []
  # loadEnvFromConfigMaps:
  #   - config_one
  #   - config_two

  # Optionally specify google service account credentials as Kubernetes secrets. If you are using the terraform google provider you can specify the credentials as "${file("/var/secrets/some-secret-name/key.json")}".
  googleServiceAccountSecrets: []
  # googleServiceAccountSecrets:
  #   - name: some-secret-name
  #     secretName: the_k8s_secret_name

  # Optionally specify additional volumes for the pod.
  extraVolumes: []
  # extraVolumes:
  #   - name: some-volume-name
  #     emptyDir: {}

  # Optionally specify additional volume mounts for the container.
  extraVolumeMounts: []
  # extraVolumeMounts:
  #   - name: some-volume-name
  #     mountPath: /path/in/container

  extraManifests: []
  # extraManifests:
  #  - apiVersion: cloud.google.com/v1beta1
  #    kind: BackendConfig
  #    metadata:
  #      name: "{{ .Release.Name }}-test"
  #    spec:
  #      securityPolicy:
  #        name: "gcp-cloud-armor-policy-test"

  initContainers: []
  # initContainers:
  # - name: example
  #   image: alpine:latest
  #   command: ['sh', '-c', 'echo The init container is running! && sleep 10']

  # hostAliases:
  #   - hostnames:
  #     - aaa.com
  #     - test.ccc.com
  #     ip: 10.0.0.0
  #   - hostnames:
  #     - bbb.com
  #     ip: 10.0.0.2

  extraArgs: []
  # extraArgs:
  # - --disable-autoplan
  # - --disable-repo-locking

  extraContainers: []
  # containers:
  #  - name: <container name>
  #    args:
  #      - ...
  #    image: <docker images>
  #    imagePullPolicy: IfNotPresent
  #    resources:
  #      limits:
  #        memory: 128Mi
  #      requests:
  #        cpu: 100m
  #        memory: 128Mi
  #    volumeMounts:
  #      - ...
